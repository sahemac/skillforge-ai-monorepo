# .github/workflows/run-python-tests.yml

name: "Reusable - Run Python Tests"

on:
  workflow_call:
    inputs:
      python-version:
        description: "The version of Python to use"
        required: false
        type: string
        default: "3.11"
      service-directory:
        description: "The directory of the service to test"
        required: true
        type: string

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4   # <--- ÉTAPE AJOUTÉE ICI

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-pip-${{ hashFiles(format('{0}/requirements*.txt', inputs.service-directory)) }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
          echo "🔍 Debug: Current directory: $(pwd)"
          echo "🔍 Debug: Service directory: ${{ inputs.service-directory }}"
          echo "🔍 Debug: Files in service directory:"
          ls -la "${{ inputs.service-directory }}/"
          
          # Create a virtual environment
          python -m venv .venv
          source .venv/bin/activate
          
          # Try requirements-dev.txt first, fallback to requirements.txt
          if [[ -f "${{ inputs.service-directory }}/requirements-dev.txt" ]]; then
            echo "📦 Installing from requirements-dev.txt..."
            pip install -r ${{ inputs.service-directory }}/requirements-dev.txt
          elif [[ -f "${{ inputs.service-directory }}/requirements.txt" ]]; then
            echo "📦 Installing from requirements.txt..."
            pip install -r ${{ inputs.service-directory }}/requirements.txt
            echo "✅ Installation completed"
            echo "🔍 Verifying FastAPI installation:"
            python -c "import fastapi; print(f'FastAPI version: {fastapi.__version__}')" || echo "❌ FastAPI not found"
          else
            echo "❌ No requirements file found in ${{ inputs.service-directory }}"
            echo "Available files:"
            find "${{ inputs.service-directory }}" -name "requirements*.txt" -o -name "*.txt" | head -10
            exit 1
          fi

      - name: Run tests with pytest
        run: |
          cd ${{ inputs.service-directory }}
          
          # Check if pytest.ini or setup.cfg exists for configuration
          if [[ -f "pytest.ini" ]]; then
            echo "📋 Using pytest.ini configuration"
            pytest
          elif [[ -f "setup.cfg" ]]; then
            echo "📋 Using setup.cfg configuration"
            pytest
          else
            echo "📋 Running pytest with default configuration"
            # Run tests with verbose output and coverage
            pytest -v --tb=short
          fi