# .github/workflows/test-secrets-config.yml
name: "Test - Secrets Configuration"

on:
  workflow_dispatch:
    inputs:
      verbose:
        description: 'Enable verbose output'
        type: boolean
        default: false

permissions:
  contents: read
  id-token: write

jobs:
  validate-secrets:
    name: Validate GitHub Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check required secrets exist
        run: |
          echo "🔍 Checking GitHub Secrets Configuration..."
          echo ""
          
          # Check if secrets are defined (they will be masked in output)
          MISSING_SECRETS=()
          
          if [[ -z "${{ secrets.GCP_PROJECT_ID }}" ]]; then
            MISSING_SECRETS+=("GCP_PROJECT_ID")
          else
            echo "✅ GCP_PROJECT_ID is configured"
          fi
          
          if [[ -z "${{ secrets.GCP_WIF_PROVIDER }}" ]]; then
            MISSING_SECRETS+=("GCP_WIF_PROVIDER")
          else
            echo "✅ GCP_WIF_PROVIDER is configured"
          fi
          
          if [[ -z "${{ secrets.GCP_CICD_SERVICE_ACCOUNT }}" ]]; then
            MISSING_SECRETS+=("GCP_CICD_SERVICE_ACCOUNT")
          else
            echo "✅ GCP_CICD_SERVICE_ACCOUNT is configured"
          fi
          
          if [[ -z "${{ secrets.DATABASE_URL_STAGING }}" ]]; then
            MISSING_SECRETS+=("DATABASE_URL_STAGING")
          else
            echo "✅ DATABASE_URL_STAGING is configured"
          fi
          
          echo ""
          if [[ ${#MISSING_SECRETS[@]} -gt 0 ]]; then
            echo "❌ Missing secrets:"
            for secret in "${MISSING_SECRETS[@]}"; do
              echo "  - $secret"
            done
            exit 1
          else
            echo "✅ All required secrets are configured!"
          fi

      - name: Test Google Cloud Authentication
        id: auth
        uses: google-github-actions/auth@v2
        continue-on-error: true
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_CICD_SERVICE_ACCOUNT }}
          token_format: 'access_token'
          create_credentials_file: true
          audience: 'https://github.com/sahemac/skillforge-ai-monorepo'

      - name: Check authentication result
        run: |
          if [[ "${{ steps.auth.outcome }}" == "success" ]]; then
            echo "✅ Google Cloud authentication successful!"
            gcloud config list
          else
            echo "❌ Google Cloud authentication failed"
            echo "Please check:"
            echo "1. Workload Identity Federation is configured correctly"
            echo "2. The repository is authorized: sahemac/skillforge-ai-monorepo"
            echo "3. Service account has necessary permissions"
            exit 1
          fi

      - name: Test database connectivity (optional)
        if: ${{ inputs.verbose }}
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_STAGING }}
        run: |
          echo "🔍 Testing database connectivity..."
          
          # Install PostgreSQL client
          sudo apt-get update && sudo apt-get install -y postgresql-client
          
          # Extract connection details from URL
          if [[ -n "$DATABASE_URL" ]]; then
            # Parse DATABASE_URL
            # Format: postgresql+asyncpg://user:pass@host:port/database
            URL_WITHOUT_DRIVER="${DATABASE_URL#postgresql+asyncpg://}"
            USER_PASS="${URL_WITHOUT_DRIVER%%@*}"
            HOST_PORT_DB="${URL_WITHOUT_DRIVER#*@}"
            HOST_PORT="${HOST_PORT_DB%%/*}"
            DATABASE="${HOST_PORT_DB#*/}"
            HOST="${HOST_PORT%%:*}"
            PORT="${HOST_PORT#*:}"
            USER="${USER_PASS%%:*}"
            
            echo "Host: $HOST"
            echo "Port: $PORT"
            echo "Database: $DATABASE"
            echo "User: $USER"
            
            # Test connection (will fail if not accessible from GitHub Actions)
            export PGPASSWORD="${USER_PASS#*:}"
            if pg_isready -h "$HOST" -p "$PORT" -U "$USER" -d "$DATABASE"; then
              echo "✅ Database is reachable"
            else
              echo "⚠️  Database not reachable from GitHub Actions (might need Cloud SQL Proxy)"
            fi
          else
            echo "⚠️  DATABASE_URL_STAGING not configured"
          fi

      - name: Generate summary report
        if: always()
        run: |
          echo "## 📊 Secrets Configuration Test Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: sahemac/skillforge-ai-monorepo" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔐 Secrets Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -n "${{ secrets.GCP_PROJECT_ID }}" ]]; then
            echo "- ✅ GCP_PROJECT_ID" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ GCP_PROJECT_ID" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "${{ secrets.GCP_WIF_PROVIDER }}" ]]; then
            echo "- ✅ GCP_WIF_PROVIDER" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ GCP_WIF_PROVIDER" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "${{ secrets.GCP_CICD_SERVICE_ACCOUNT }}" ]]; then
            echo "- ✅ GCP_CICD_SERVICE_ACCOUNT" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ GCP_CICD_SERVICE_ACCOUNT" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "${{ secrets.DATABASE_URL_STAGING }}" ]]; then
            echo "- ✅ DATABASE_URL_STAGING" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ DATABASE_URL_STAGING" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Authentication Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.auth.outcome }}" == "success" ]]; then
            echo "✅ Google Cloud authentication successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Google Cloud authentication failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Configure any missing secrets in GitHub Settings" >> $GITHUB_STEP_SUMMARY
          echo "2. Run \`./scripts/setup-github-secrets.sh\` to configure GCP" >> $GITHUB_STEP_SUMMARY
          echo "3. Test deployment pipeline with \`deploy-user-service.yml\`" >> $GITHUB_STEP_SUMMARY