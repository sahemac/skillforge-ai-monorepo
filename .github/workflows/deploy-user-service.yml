# .github/workflows/deploy-user-service.yml
name: "Deploy - User Service"
on:
  workflow_dispatch:
    inputs:
      skip_migration:
        description: 'Skip database migration'
        type: boolean
        default: false
      environment:
        description: 'Target environment'
        type: choice
        options:
          - staging
          - production
        default: staging
  push:
    branches:
      - 'develop'
    paths:
      - 'apps/backend/user-service/**'

jobs:
  test:
    name: Run Unit Tests
    uses: ./.github/workflows/run-python-tests.yml
    with:
      service-directory: 'apps/backend/user-service'

  build:
    name: Build & Push Docker Image
    needs: test
    uses: ./.github/workflows/build-push-docker.yml
    with:
      image_name: 'skillforge-docker-repo-staging/user-service'
      dockerfile_path: 'apps/backend/user-service/Dockerfile'
    secrets:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_WIF_PROVIDER: ${{ secrets.GCP_WIF_PROVIDER }}
      GCP_CICD_SERVICE_ACCOUNT: ${{ secrets.GCP_CICD_SERVICE_ACCOUNT }}

  migrate:
    name: Run Database Migration
    needs: build
    if: ${{ !inputs.skip_migration }}
    uses: ./.github/workflows/run-alembic-migration.yml
    with:
      service_name: 'user-service'
      environment: ${{ inputs.environment || 'staging' }}
      service_url: 'https://user-service-staging-123456789.europe-west1.run.app'
    secrets:
      DATABASE_URL: ${{ secrets.DATABASE_URL_STAGING }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

  # Job factice pour gérer le cas skip_migration
  migrate_skip:
    name: Migration Skipped
    needs: build
    if: ${{ inputs.skip_migration }}
    runs-on: ubuntu-latest
    steps:
      - name: Migration Skipped
        run: echo "Migration skipped as requested"

  deploy:
    name: Deploy to Cloud Run  
    needs: [build, migrate, migrate_skip]
    if: ${{ always() && needs.build.result == 'success' && (needs.migrate.result == 'success' || needs.migrate_skip.result == 'success') }}
    uses: ./.github/workflows/deploy-to-cloud-run.yml
    with:
      image_uri: ${{ needs.build.outputs.image_uri }}
      service_name: 'user-service-staging'
      gcp_region: 'europe-west1'
    secrets:
      GCP_WIF_PROVIDER: ${{ secrets.GCP_WIF_PROVIDER }}
      GCP_CICD_SERVICE_ACCOUNT: ${{ secrets.GCP_CICD_SERVICE_ACCOUNT }}

  notify:
    name: Send Notifications
    needs: [test, build, migrate, migrate_skip, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Migration Failed Notification
        if: ${{ needs.migrate.result == 'failure' }}
        run: |
          echo "## ❌ Migration Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The database migration for user-service failed. Deployment has been aborted." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**What happened:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker image built and pushed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Database migration failed" >> $GITHUB_STEP_SUMMARY
          echo "- ⏹️ Deployment skipped for safety" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the migration logs in the artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. Review database changes and fix any issues" >> $GITHUB_STEP_SUMMARY
          echo "3. Test migration locally before pushing again" >> $GITHUB_STEP_SUMMARY
          echo "4. Consider running with \`skip_migration: true\` if migration is not needed" >> $GITHUB_STEP_SUMMARY
          
      - name: Deployment Success Summary
        if: ${{ needs.deploy.result == 'success' }}
        run: |
          echo "## ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** user-service" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ needs.build.outputs.image_uri }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pipeline Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker image built and security scanned" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.migrate.result }}" == "success" ]]; then
            echo "- ✅ Database migration completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏭️ Database migration skipped" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- ✅ Deployed to Cloud Run successfully" >> $GITHUB_STEP_SUMMARY