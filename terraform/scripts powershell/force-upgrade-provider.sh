#!/bin/bash
# Script bash pour forcer la mise √† jour du provider Google Cloud
# R√©sout le probl√®me "Resource instance managed by newer provider version"

set -e

ENVIRONMENT=${1:-"staging"}

echo -e "\nüîß RESOLUTION FORC√âE - Provider Version Mismatch"
echo "================================================="
echo "Environment: $ENVIRONMENT"

ORIGINAL_DIR=$(pwd)
cd "environments/$ENVIRONMENT"

# Fonction de nettoyage en cas d'erreur
cleanup() {
    if [ $? -ne 0 ]; then
        echo -e "\n‚ùå Erreur d√©tect√©e, nettoyage en cours..."
        cd "$ORIGINAL_DIR"
    fi
}
trap cleanup EXIT

# 1. Sauvegarde compl√®te de l'√©tat
echo -e "\n1Ô∏è‚É£ Sauvegarde de l'√©tat actuel..."
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
BACKUP_FILE="backup-complete-$TIMESTAMP.json"

if [ -f terraform.tfstate ]; then
    cp terraform.tfstate "terraform.tfstate.backup.$TIMESTAMP"
    echo "   ‚úÖ √âtat local sauvegard√©"
fi

terraform state pull > "$BACKUP_FILE" 2>/dev/null || true
if [ -f "$BACKUP_FILE" ] && [ -s "$BACKUP_FILE" ]; then
    echo "   ‚úÖ √âtat distant sauvegard√© dans: $BACKUP_FILE"
fi

# 2. Nettoyage COMPLET du cache Terraform
echo -e "\n2Ô∏è‚É£ Nettoyage complet du cache Terraform..."

FILES_TO_REMOVE=(
    ".terraform"
    ".terraform.lock.hcl"
    "terraform.tfstate"
    "terraform.tfstate.backup"
    "*.tfplan"
)

for file in "${FILES_TO_REMOVE[@]}"; do
    if [ -e "$file" ]; then
        rm -rf "$file"
        echo "   ‚úÖ Supprim√©: $file"
    fi
done

# 3. V√©rifier la version dans backend.tf
echo -e "\n3Ô∏è‚É£ V√©rification de la version du provider..."
if grep -q 'version.*=.*"' backend.tf; then
    CONFIGURED_VERSION=$(grep 'version.*=.*"' backend.tf | sed 's/.*"\([^"]*\)".*/\1/')
    echo "   üìå Version configur√©e: $CONFIGURED_VERSION"
    
    # Forcer la version √† la plus r√©cente si n√©cessaire
    if ! echo "$CONFIGURED_VERSION" | grep -q "6\."; then
        echo "   ‚ö†Ô∏è  Version ancienne d√©tect√©e, mise √† jour vers ~> 6.0"
        sed -i 's/version.*=.*"[^"]*"/version = "~> 6.0"/' backend.tf
    fi
fi

# 4. R√©initialiser avec la derni√®re version du provider
echo -e "\n4Ô∏è‚É£ R√©initialisation avec la derni√®re version du provider..."
terraform init -upgrade

if [ $? -ne 0 ]; then
    echo "   ‚ùå Erreur lors de terraform init"
    exit 1
fi

# 5. R√©cup√©rer l'√©tat actuel et le rafra√Æchir
echo -e "\n5Ô∏è‚É£ Rafra√Æchissement de l'√©tat..."
terraform refresh -var-file="terraform.tfvars" || true

# 6. Plan d√©taill√© pour v√©rifier les changements
echo -e "\n6Ô∏è‚É£ G√©n√©ration du plan de mise √† jour..."
terraform plan -var-file="terraform.tfvars" -out="provider-upgrade.tfplan" -detailed-exitcode
PLAN_EXIT_CODE=$?

if [ $PLAN_EXIT_CODE -eq 0 ]; then
    echo -e "\n‚úÖ Aucun changement d'infrastructure requis"
    echo "Le provider a √©t√© mis √† jour avec succ√®s!"
elif [ $PLAN_EXIT_CODE -eq 2 ]; then
    echo -e "\n‚ö†Ô∏è  Des changements sont d√©tect√©s dans le plan"
    echo "Veuillez examiner le plan avant d'appliquer:"
    echo "  terraform show provider-upgrade.tfplan"
    echo ""
    echo "Si les changements sont acceptables, appliquez avec:"
    echo "  terraform apply provider-upgrade.tfplan"
else
    echo -e "\n‚ùå Erreur lors de la planification"
    echo "V√©rifiez les erreurs ci-dessus"
    exit 1
fi

# 7. R√©sum√© final
echo -e "\nüìä R√âSUM√â"
echo "========="
echo "‚úÖ Cache Terraform nettoy√©"
echo "‚úÖ Provider mis √† jour vers la derni√®re version 6.x"
echo "‚úÖ √âtat sauvegard√© dans: $BACKUP_FILE"

# Afficher la version actuelle du provider
echo -e "\nüì¶ Versions des providers:"
terraform version | grep -E "provider|google"

echo -e "\nüéâ Probl√®me de version du provider r√©solu!"
echo ""
echo "Prochaines √©tapes:"
echo "1. V√©rifiez le plan: terraform show provider-upgrade.tfplan"
echo "2. Si OK, appliquez: terraform apply provider-upgrade.tfplan"
echo "3. Testez: terraform plan -var-file=\"terraform.tfvars\""

cd "$ORIGINAL_DIR"