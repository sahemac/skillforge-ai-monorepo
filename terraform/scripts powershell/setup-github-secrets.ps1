<#
.SYNOPSIS
    Script PowerShell pour automatiser la configuration des secrets GitHub pour SkillForge AI
.DESCRIPTION
    Ce script automatise la cr√©ation des secrets et la configuration GCP pour le pipeline Terraform
.EXAMPLE
    .\setup-github-secrets.ps1 -RepoName "VOTRE-USERNAME/skillforge-ai-monorepo"
#>

param(
    [Parameter(Mandatory=$true)]
    [string]$RepoName,
    
    [string]$ProjectId = "skillforge-ai-mvp-25",
    [string]$ProjectNumber = "584748485117",
    [string]$ServiceAccountName = "terraform-ci-cd"
)

Write-Host "`nüöÄ CONFIGURATION DES SECRETS GITHUB - SKILLFORGE AI" -ForegroundColor Green
Write-Host "=======================================================" -ForegroundColor Green
Write-Host "Project ID: $ProjectId" -ForegroundColor Yellow
Write-Host "Repository: $RepoName" -ForegroundColor Yellow
Write-Host "Service Account: $ServiceAccountName" -ForegroundColor Yellow

# V√©rifier que gcloud est install√©
try {
    gcloud --version | Out-Null
    Write-Host "`n‚úÖ Google Cloud CLI d√©tect√©" -ForegroundColor Green
}
catch {
    Write-Host "`n‚ùå Google Cloud CLI non trouv√©. Installez-le depuis https://cloud.google.com/sdk" -ForegroundColor Red
    exit 1
}

# V√©rifier l'authentification
Write-Host "`n1Ô∏è‚É£ V√©rification de l'authentification Google Cloud..." -ForegroundColor Cyan
$currentAccount = gcloud config get-value account
if (-not $currentAccount) {
    Write-Host "‚ùå Non authentifi√©. Ex√©cutez 'gcloud auth login' d'abord" -ForegroundColor Red
    exit 1
}
Write-Host "   ‚úÖ Authentifi√© en tant que: $currentAccount" -ForegroundColor Green

# Cr√©er le service account
Write-Host "`n2Ô∏è‚É£ Cr√©ation du service account..." -ForegroundColor Cyan
$serviceAccountEmail = "$ServiceAccountName@$ProjectId.iam.gserviceaccount.com"

try {
    gcloud iam service-accounts create $ServiceAccountName `
        --project=$ProjectId `
        --description="Service account for Terraform CI/CD pipeline" `
        --display-name="Terraform CI/CD" `
        --quiet
    Write-Host "   ‚úÖ Service account cr√©√©: $serviceAccountEmail" -ForegroundColor Green
}
catch {
    Write-Host "   ‚ö†Ô∏è  Service account existe d√©j√† ou erreur de cr√©ation" -ForegroundColor Yellow
}

# Assigner les r√¥les
Write-Host "`n3Ô∏è‚É£ Attribution des r√¥les IAM..." -ForegroundColor Cyan
$roles = @(
    "roles/editor",
    "roles/storage.admin", 
    "roles/iam.serviceAccountAdmin",
    "roles/compute.admin",
    "roles/cloudsql.admin",
    "roles/run.admin"
)

foreach ($role in $roles) {
    try {
        gcloud projects add-iam-policy-binding $ProjectId `
            --member="serviceAccount:$serviceAccountEmail" `
            --role="$role" `
            --quiet
        Write-Host "   ‚úÖ R√¥le assign√©: $role" -ForegroundColor Green
    }
    catch {
        Write-Host "   ‚ö†Ô∏è  Erreur lors de l'assignation du r√¥le: $role" -ForegroundColor Yellow
    }
}

# Cr√©er Workload Identity Pool
Write-Host "`n4Ô∏è‚É£ Cr√©ation du Workload Identity Pool..." -ForegroundColor Cyan
try {
    gcloud iam workload-identity-pools create "github-actions" `
        --project=$ProjectId `
        --location="global" `
        --display-name="GitHub Actions Pool" `
        --quiet
    Write-Host "   ‚úÖ Workload Identity Pool cr√©√©" -ForegroundColor Green
}
catch {
    Write-Host "   ‚ö†Ô∏è  Pool existe d√©j√† ou erreur de cr√©ation" -ForegroundColor Yellow
}

# Cr√©er le Provider OIDC
Write-Host "`n5Ô∏è‚É£ Cr√©ation du Provider OIDC..." -ForegroundColor Cyan
try {
    # Configuration correcte de l'attribute mapping sans condition
    gcloud iam workload-identity-pools providers create-oidc "github" `
        --project=$ProjectId `
        --location="global" `
        --workload-identity-pool="github-actions" `
        --display-name="GitHub Actions Provider" `
        --description="OIDC provider for GitHub Actions workflows" `
        --attribute-mapping="google.subject=assertion.sub,attribute.repository=assertion.repository,attribute.actor=assertion.actor,attribute.ref=assertion.ref" `
        --issuer-uri="https://token.actions.githubusercontent.com" `
        --quiet
    Write-Host "   ‚úÖ Provider OIDC cr√©√©" -ForegroundColor Green
}
catch {
    Write-Host "   ‚ö†Ô∏è  Provider existe d√©j√† ou erreur de cr√©ation" -ForegroundColor Yellow
    Write-Host "   Si erreur INVALID_ARGUMENT, utilisez: .\fix-oidc-provider.ps1 -RepoName '$RepoName'" -ForegroundColor Cyan
}

# Autoriser le repository GitHub
Write-Host "`n6Ô∏è‚É£ Autorisation du repository GitHub..." -ForegroundColor Cyan
$principalSet = "principalSet://iam.googleapis.com/projects/$ProjectNumber/locations/global/workloadIdentityPools/github-actions/attribute.repository/$RepoName"

try {
    gcloud iam service-accounts add-iam-policy-binding `
        --project=$ProjectId `
        --role="roles/iam.workloadIdentityUser" `
        --member="$principalSet" `
        $serviceAccountEmail `
        --quiet
    Write-Host "   ‚úÖ Repository autoris√©: $RepoName" -ForegroundColor Green
}
catch {
    Write-Host "   ‚ùå Erreur lors de l'autorisation du repository" -ForegroundColor Red
}

# G√©n√©rer les secrets
Write-Host "`n7Ô∏è‚É£ G√©n√©ration des secrets..." -ForegroundColor Cyan

function Generate-SecurePassword {
    param([int]$Length = 32)
    $bytes = New-Object byte[] $Length
    $random = [System.Security.Cryptography.RNGCryptoServiceProvider]::Create()
    $random.GetBytes($bytes)
    return [Convert]::ToBase64String($bytes)
}

$jwtSecretStaging = Generate-SecurePassword -Length 48
$jwtSecretProduction = Generate-SecurePassword -Length 48
$postgresPasswordStaging = Generate-SecurePassword -Length 32
$postgresPasswordProduction = Generate-SecurePassword -Length 32

# Sauvegarder les secrets dans un fichier s√©curis√©
$secretsFile = "secrets-backup-$(Get-Date -Format 'yyyyMMdd-HHmmss').json"
$secrets = @{
    "generated_date" = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "project_id" = $ProjectId
    "repository" = $RepoName
    "staging" = @{
        "jwt_secret" = $jwtSecretStaging
        "postgres_password" = $postgresPasswordStaging
    }
    "production" = @{
        "jwt_secret" = $jwtSecretProduction
        "postgres_password" = $postgresPasswordProduction
    }
}

$secrets | ConvertTo-Json -Depth 3 | Out-File -FilePath $secretsFile -Encoding UTF8
Write-Host "   ‚úÖ Secrets sauvegard√©s dans: $secretsFile" -ForegroundColor Green

# Afficher les r√©sultats
Write-Host "`nüéâ CONFIGURATION TERMIN√âE!" -ForegroundColor Green
Write-Host "=========================" -ForegroundColor Green

Write-Host "`nüìã SECRETS √Ä CONFIGURER DANS GITHUB:" -ForegroundColor Yellow
Write-Host "Repository Secrets (Settings ‚Üí Secrets and variables ‚Üí Actions):" -ForegroundColor Cyan

$workloadIdentityProvider = "projects/$ProjectNumber/locations/global/workloadIdentityPools/github-actions/providers/github"

Write-Host ""
Write-Host "GCP_WORKLOAD_IDENTITY_PROVIDER:" -ForegroundColor White
Write-Host $workloadIdentityProvider -ForegroundColor Green

Write-Host ""
Write-Host "GCP_SERVICE_ACCOUNT:" -ForegroundColor White  
Write-Host $serviceAccountEmail -ForegroundColor Green

Write-Host "`nüîê ENVIRONMENT SECRETS:" -ForegroundColor Yellow

Write-Host "`nStaging Environment Secrets:" -ForegroundColor Cyan
Write-Host "TF_VAR_jwt_secret: $jwtSecretStaging" -ForegroundColor White
Write-Host "TF_VAR_postgres_password: $postgresPasswordStaging" -ForegroundColor White

Write-Host "`nProduction Environment Secrets:" -ForegroundColor Cyan  
Write-Host "TF_VAR_jwt_secret: $jwtSecretProduction" -ForegroundColor White
Write-Host "TF_VAR_postgres_password: $postgresPasswordProduction" -ForegroundColor White

Write-Host "`nüìã √âTAPES SUIVANTES:" -ForegroundColor Yellow
Write-Host "1. Copiez les valeurs ci-dessus dans GitHub Secrets" -ForegroundColor Cyan
Write-Host "2. Cr√©ez les environments 'staging' et 'production'" -ForegroundColor Cyan
Write-Host "3. Configurez les protection rules pour production" -ForegroundColor Cyan
Write-Host "4. Testez le workflow avec un changement dans /terraform/" -ForegroundColor Cyan

Write-Host "`nüîí S√âCURIT√â:" -ForegroundColor Red
Write-Host "- Sauvegardez le fichier $secretsFile dans un lieu s√ªr" -ForegroundColor Yellow
Write-Host "- Ne committez jamais ce fichier dans Git" -ForegroundColor Yellow
Write-Host "- Supprimez ce fichier apr√®s configuration" -ForegroundColor Yellow

Write-Host "`n‚úÖ Script termin√© avec succ√®s!" -ForegroundColor Green

# Test de connectivit√© (optionnel)
Write-Host "`nüß™ TEST DE VALIDATION:" -ForegroundColor Magenta
Write-Host "Voulez-vous tester la configuration? (O/N): " -ForegroundColor Yellow -NoNewline
$test = Read-Host

if ($test -eq "O" -or $test -eq "o") {
    Write-Host "`nTest de la configuration..." -ForegroundColor Cyan
    
    # Test 1: V√©rifier le service account
    Write-Host "Test 1: Service Account..." -ForegroundColor Cyan
    try {
        $saInfo = gcloud iam service-accounts describe $serviceAccountEmail --format=json | ConvertFrom-Json
        Write-Host "   ‚úÖ Service Account OK: $($saInfo.email)" -ForegroundColor Green
    }
    catch {
        Write-Host "   ‚ùå Erreur Service Account" -ForegroundColor Red
    }
    
    # Test 2: V√©rifier Workload Identity
    Write-Host "Test 2: Workload Identity Pool..." -ForegroundColor Cyan
    try {
        gcloud iam workload-identity-pools describe github-actions --project=$ProjectId --location=global --quiet
        Write-Host "   ‚úÖ Workload Identity Pool OK" -ForegroundColor Green
    }
    catch {
        Write-Host "   ‚ùå Erreur Workload Identity Pool" -ForegroundColor Red
    }
    
    Write-Host "`n‚úÖ Tests termin√©s!" -ForegroundColor Green
}

Write-Host "`nüöÄ Configuration pr√™te pour GitHub Actions!" -ForegroundColor Green